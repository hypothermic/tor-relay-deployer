#!/bin/bash
###########################################################################
##                     Automatic Tor Relay Deployer                      ##
##            Made for bash on Ubuntu Server 16.04 and higher            ##
##   ==================================================================  ##
##   by hypothermic (www.github.com/hypothermic) <admin@hypothermic.nl>  ##
###########################################################################

# --- torrc Settings --- #
tor_orport=9001
tor_dirport=9030
tor_ctrlport=9051
tor_addr="tor.example.com"
tor_nickname="AutoDeployedRelay"
tor_contactinfo="John Doe <john@example.com>"
tor_family=""
tor_allow_exit=false
declare -a tor_exitpolicy_rules=("accept *:119" "accept *:6660-6667")

torrc=/etc/tor/torrc

# --- UFW Settings (no-op if UFW is not installed) --- #
ufw_reset=true
declare -a ufw_reset_newrules=("ufw allow ssh" "ufw allow ftp")

# --- Logging Settings --- #
enable_logging=true
log=./deploy.log
log_overwrite=true

# --- Misc. Settings --- #
self_destruct=false

###########################################################################
##  ---------------------------  FUNCTIONS  ---------------------------  ##
###########################################################################

# @param String
function err {
    str="[ERROR] >> $1\n"
    >&2 printf "$str"
    log "$str"
    exit 1
}

# @param String
function warn {
    str="[WARN] $1\n"
    >&2 printf "$str"
    log "$str"
}

# @param String
function info {
    str="[INFO] $1\n"
    printf "$str"
    log "$str"
}

# @param String
function log {
    if [ "$enable_logging" = true ]; then
        &>>"$log" printf "$1\n"
    fi
}

# @param String  #note: how is printfn not in bash yet??
function printfn {
    printf "$1\n"
}

###########################################################################
##  --------------------------  MAIN SCRIPT  --------------------------  ##
###########################################################################

# == check prerequisites ===
if [[ $EUID -ne 0 ]]; then
    err "This script must be run as root"
fi

if [[ ! $tor_orport =~ ^-?[0-9]+$ ]] || (( $tor_orport < 1024 )) || (( $tor_orport > 65535)); then
    err "tor_orport invalid"
fi

if [[ ! $tor_dirport =~ ^-?[0-9]+$ ]] || (( $tor_dirport < 1024 )) || (( $tor_dirport > 65535)); then 
    err "tor_dirport invalid"
fi

if [[ ! $tor_ctrlport =~ ^-?[0-9]+$ ]] || (( $tor_ctrlport < 1024 )) || (( $tor_ctrlport > 65535)); then 
    err "tor_ctrlport invalid"
fi

# === init log ===
date=`date '+%Y-%m-%d %H:%M:%S'`
epoch=`date +%s`
if [ "$enable_logging" = true ]; then
    if [ "$log_overwrite" = true ]; then
        printf "\n======================================\n" &>"$log"
    else
        printf "\n======================================\n" &>>"$log"
    fi
        printf "== Automatic Tor Relay Deployer log ==\n" &>>"$log"
        printf "==  $date $epoch  ==\n" &>>"$log"
        printf "======================================\n\n" &>>"$log"
else
    log="/dev/null"
fi

# === configure fw ===
if [ -x "$(command -v ufw)" ]; then
    info "Configuring UFW..."
    if [ "$ufw_reset" = true ]; then
        warn "Resetting UFW rules except for: `echo ${ufw_reset_newrules[@]}`"
        &>>"$log" `yes 2>/dev/null | ufw reset`
        for i in "${ufw_reset_newrules[@]}" 
        do
            $i &>>"$log"
        done
        if ! sudo ufw enable | grep -Fq 'startup' ; then
            warn "Failed to enable UFW, check it manually."
        fi
    fi
    &>>"$log" ufw allow $tor_orport/tcp
    &>>"$log" ufw allow $tor_dirport/tcp
else
    warn "UFW not found: falling back to iptables, might be unstable!"
    iptables -A INPUT -p tcp --dport $tor_orport -j ACCEPT
    iptables -A OUTPUT -p tcp --dport $tor_orport -j ACCEPT
    iptables -A INPUT -p tcp --dport $tor_dirport -j ACCEPT
    iptables -A OUTPUT -p tcp --dport $tor_dirport -j ACCEPT
fi

# === add deb repo === (todo: check if sources files already contain repo lines)
info "Adding debian repositories..."
&>>"$log" deb https://deb.torproject.org/torproject.org xenial main
&>>"$log" deb-src https://deb.torproject.org/torproject.org xenial main
&>>"$log" apt-get --assume-yes update

# === install pkg ===
if [ $(dpkg-query -W -f='${Status}' tor 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
    info "Installing Tor..."
    &>>"$log" apt-get --assume-yes install tor;
else
    info "Tor is already installed."
fi

# === configure torrc ===
info "Overwriting torrc..."
printfn "#===============================================#" 1> "$torrc"
printfn "#== Generated by Automatic Tor Relay Deployer ==#" 1>> "$torrc"
printfn "#==    on $date ($epoch)    ==#" 1>> "$torrc"
printfn "#===============================================#\n" 1>> "$torrc"
printfn "Address $tor_addr" 1>> "$torrc"
printfn "#Family $tor_family" 1>> "$torrc"
printfn "ORPort $tor_orport" 1>> "$torrc"
printfn "DirPort $tor_dirport\n" 1>> "$torrc"
printfn "ControlPort $tor_ctrlport" 1>> "$torrc"
printfn "CookieAuthentication 1" 1>> "$torrc" # never use unauthed ctrlport
printfn "Nickname $tor_nickname" 1>> "$torrc"
printfn "ContactInfo $tor_contactinfo" 1>> "$torrc"

if [ "$tor_allow_exit" = true ]; then
    printfn "ExitRelay 1" 1>> "$torrc"
    for i in "${tor_exitpolicy_rules[@]}" 
    do
        printfn "ExitPolicy $i" 1>> "$torrc"
    done
else
    printfn "ExitRelay 0" 1>> "$torrc"
    printfn "ExitPolicy reject *:*" 1>> "$torrc"
fi

printfn "#===============================================#" 1>> "$torrc"

# === finish up ===
info "Restarting tor service..."
&>>"$log" service tor restart
if [ "$self_destruct" = true ]; then
    info "Self destructing..."
    &>>"$log" rm -- "$0"
fi

printfn "===================================="
printfn "==  Tor relay has been deployed.  =="
printfn "==      $date       =="
printfn "====================================\n"